<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>河马实验室</title>
    <link>/</link>
    <description>Recent content on 河马实验室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Jan 2018 18:59:43 +0530</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mongoose OS on ESPer</title>
      <link>/post/mos/</link>
      <pubDate>Sun, 28 Jan 2018 18:59:43 +0530</pubDate>
      
      <guid>/post/mos/</guid>
      <description>Recently I&amp;rsquo;ve got my hands on the craved-for IoT ESP32, thanks to DFRobot, and have been tinkering with it ever since. I&amp;rsquo;m really amazed by it since it packs both Bluetooth and WiFi in a small yet powerful unit. Since I received the MCU rather than the module, so, to use it, I made myself a breakout board named ESPer(because, why not? :smile:). Feel free to check out its Instructable over here.</description>
    </item>
    
    <item>
      <title>Testing &#34;django-netjsonconfig&#34;</title>
      <link>/post/netjsonconfig/</link>
      <pubDate>Sun, 14 Jan 2018 14:28:40 +0530</pubDate>
      
      <guid>/post/netjsonconfig/</guid>
      <description>A task came up in Google Code-in which asked me to install the django-netjsonconfig module by OpenWISP. Furthermore, I&amp;rsquo;m also supposed to share the challenges I faced during the set-up process as a sort of feedback. I&amp;rsquo;ll be trying be concise in this post so, without further ado, I&amp;rsquo;m beginning with this post.
Installing &amp;ldquo;django-netjsonconfig&amp;rdquo; The installation instructions for this this module have been well-documented on its GitHub repository. So I began the installation by creating a Python 2.</description>
    </item>
    
    <item>
      <title>Google Code-in with OpenWISP</title>
      <link>/post/gci/</link>
      <pubDate>Sat, 13 Jan 2018 10:29:23 +0530</pubDate>
      
      <guid>/post/gci/</guid>
      <description>Recently I&amp;rsquo;ve been participating in Google Code-in which is Google&amp;rsquo;s initiative to introduce young minds to the concept of FOSS, that is Free or Open-Source Softwares. This post is for sharing my experiences with GCI, as the title suggests. So let&amp;rsquo;s just get on it.
It all began while I was returning from an outing on 5 December, 2017 and was searching the internet for Google Science Fair to check if I could participate in it or not.</description>
    </item>
    
    <item>
      <title></title>
      <link>/404/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/404/</guid>
      <description>Oopsie! It seems that the page that you&amp;rsquo;re trying to access doesn&amp;rsquo;t exist. :worried:
If you&amp;rsquo;re sure that it exists, chances are it might have been moved to a new link! You may search for it on the home page.</description>
    </item>
    
    <item>
      <title></title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>I’m just another teenager who likes writing, programming and making stuff. Even setting the title as Who Am I for this article is reminding me of whoami in Linux. I feel the inner urge to contribute something to the Internet because I love writing and I believe posting something online enables users all around the globe to see your work and suggest improvements.
Recently I&amp;rsquo;ve also started taking interest in web designing and hosting the fruitful results of which these site and blogs are!</description>
    </item>
    
    <item>
      <title>HSVS</title>
      <link>/project/hsvs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/hsvs/</guid>
      <description>HTTP全流量分析目前已经在各大厂里比较普及了(BAT，携程，网易…)。 HTTP全流量分析相比之前单纯的WEB日志多了详细的请求头，完整的相应体，能分析出更多有用的东西。特别是随着RESTful的流行，传统的WEB日志已经拿不到请求的真实响应(status code)了，现在json请求的响应总是200，状态码是放在返回体的&amp;rdquo;status&amp;rdquo;:xxx 中。
全流量分析涉及到一定的底层开发，还有分析系统开发，对于小企业有一定门槛，本项目旨在消除此门槛，让大家都能做到自由的获取HTTP全流量数据。 笔者所从事的信息安全行业对于HTTP全流量分析需求比较迫切。 HTTP流量分析既可以发现信息安全领域的问题，也可以在业务风控领域有所建树。 从信息安全的发展趋势来看，目前是从信息安全往企业安全和内容安全发展。 而HTTP全流量分析成为了企业安全和内容安全的重要组成部分。
本项目名称为HSVS(HTTP STREAM VISUALIZATION SYSTEM), HTTP流量可视化系统。 本项目名称为HSVS，并没有直接称呼为流量分析系统；目的是将分析部分开放出来，让使用者使用自己的方法，自由的进行分析。
查看详细</description>
    </item>
    
    <item>
      <title>phonelocation</title>
      <link>/project/phonelocation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/phonelocation/</guid>
      <description>识别原理
我国手机号共有11位，由工信部统一管理
 前三位：网络识别号， 识别运营商； 中间四位：地区编码； 后四位为用户编号，表示用户身份；  项目源码 https://github.com/chennqqi/phonelocation
查看详细</description>
    </item>
    
  </channel>
</rss>